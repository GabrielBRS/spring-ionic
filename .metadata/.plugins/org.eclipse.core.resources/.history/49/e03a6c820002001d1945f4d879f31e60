package com.gabrielsousa.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

@Configuration
@EnableWebSecurity
//@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig {

//	@Autowired
//	private Environment env;
//
	private static final String[] PUBLIC_MATCHERS = { "/h2-console/**", "/products", "/categories"

	};
//
//	private static final String[] PUBLIC_MATCHERS_GET = { "/products/**", "/categories/**", "/states/**","/clients/**" };
//
//	private static final String[] PUBLIC_MATCHERS_POST = { "/clients/**", "/auth/forgot/**" };
//

//	 @Bean
//	    public UserDetailsService userDetailsService() {
//	        return new ShopmeUserDetailsService();
//	    }
	 
	    @Bean
	    public BCryptPasswordEncoder passwordEncoder() {
	        return new BCryptPasswordEncoder();
	    }
	 
	    @Bean
	    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
			http.cors().and().csrf().disable();
	        http.authorizeRequests()
	        		.antMatchers(PUBLIC_MATCHERS).permitAll()
//	                .antMatchers("/users/**", "/settings/**").hasAuthority("Admin")
//	                .hasAnyAuthority("Admin", "Editor", "Salesperson", "Shipper")
	                .anyRequest().authenticated()
//	                .and().formLogin()
//	                .loginPage("/login")
//	                    .usernameParameter("email")
//	                    .permitAll()
//	                .and()
//	                .rememberMe().key("AbcdEfghIjklmNopQrsTuvXyz_0123456789")
//	                .and()
//	                .logout().permitAll()
	                ;
	 
	        http.headers().frameOptions().sameOrigin();
	 
	        return http.build();
	    }
	 
	    @Bean
	    public WebSecurityCustomizer webSecurityCustomizer() {
	        return (web) -> web.ignoring().antMatchers("/images/**", "/js/**", "/webjars/**");
	    }
	 

//	@Override
//	protected void configure(HttpSecurity http) throws Exception {
//		http.cors().and().csrf().disable();
//		http.authorizeRequests().antMatchers(PUBLIC_MATCHERS).permitAll().anyRequest().authenticated();
//		http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
//	}

	@Bean
	CorsConfigurationSource corsConfigurationSource() {
		final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		source.registerCorsConfiguration("/**", new CorsConfiguration().applyPermitDefaultValues());
		return source;
	}

//	@Override
//	protected void configure(HttpSecurity http) throws Exception {
//
//		if (Arrays.asList(env.getActiveProfiles()).contains("dev")||Arrays.asList(env.getActiveProfiles()).contains("test")) {
//			http.headers().frameOptions().disable();
//		}
//
//		http.cors().and().csrf().disable();
//		http.authorizeRequests().antMatchers(HttpMethod.POST, PUBLIC_MATCHERS_POST).permitAll()
//				.antMatchers(HttpMethod.GET, PUBLIC_MATCHERS_GET).permitAll().antMatchers(PUBLIC_MATCHERS).permitAll()
//				.anyRequest().authenticated();
////		http.addFilter(new JWTAuthenticationFilter(authenticationManager(), jwtUtil));
////		http.addFilter(new JWTAuthorizationFilter(authenticationManager(), jwtUtil, userDetailsService));
//		http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
//	}
//	

}
