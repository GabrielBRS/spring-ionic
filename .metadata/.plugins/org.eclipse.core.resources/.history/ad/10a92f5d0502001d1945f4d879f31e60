package com.gabrielsousa.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.access.intercept.AuthorizationFilter;
import org.springframework.security.web.authentication.AuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import com.gabrielsousa.repository.UserRepository;
import com.gabrielsousa.service.UserService;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig {

//	@Autowired
//	private Environment env;

	private UserService userDetailsService;
	
	private BCryptPasswordEncoder bCryptPasswordEncoder;
	
	private UserRepository userRepository;
	
	private static final String[] PUBLIC_MATCHERS = { 
			"/h2-console/**", 
			"/products", 
			"/categories"
	};

	 @Autowired
	    public void WebSecurity(@Qualifier("userService") UserService userDetailsService,
	            BCryptPasswordEncoder bCryptPasswordEncoder,
	            UserRepository userRepository) {
	        this.userDetailsService = userDetailsService;
	        this.bCryptPasswordEncoder = bCryptPasswordEncoder;
	        this.userRepository = userRepository;
	    }
	 
	    @Bean
	    public BCryptPasswordEncoder passwordEncoder() {
	        return new BCryptPasswordEncoder();
	    }
	 
	    @Bean
	    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
	    	
	    	// Configure AuthenticationManagerBuilder
	        AuthenticationManagerBuilder authenticationManagerBuilder = http.getSharedObject(AuthenticationManagerBuilder.class);
	        authenticationManagerBuilder.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder);

	        // Get AuthenticationManager
	        AuthenticationManager authenticationManager = authenticationManagerBuilder.build(); 
	    	
	    	http
	        
	        .cors().and()
            .csrf().disable().authorizeRequests()
            .antMatchers(HttpMethod.POST, SecurityConstants.SIGN_UP_URL)
            .permitAll()
            .anyRequest().authenticated().and()
            .addFilter(getAuthenticationFilter(authenticationManager))
            .addFilter(new AuthorizationFilter(authenticationManager, userRepository))
            .authenticationManager(authenticationManager)
            .sessionManagement()
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS);
    http.headers().frameOptions().disable();

	    	//			http.cors().and().csrf().disable();
//	        http.authorizeRequests()
//	        		.antMatchers(PUBLIC_MATCHERS).permitAll()
////	                .antMatchers("/users/**", "/settings/**").hasAuthority("Admin")
////	                .hasAnyAuthority("Admin", "Editor", "Salesperson", "Shipper")
//	                .anyRequest().authenticated()
////	                .and().formLogin()
////	                .loginPage("/login")
////	                    .usernameParameter("email")
////	                    .permitAll()
////	                .and()
////	                .rememberMe().key("AbcdEfghIjklmNopQrsTuvXyz_0123456789")
////	                .and()
////	                .logout().permitAll()
//	                ;
//	        
////	        http.headers().frameOptions().sameOrigin();
//	        
//	        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
	 
	        return http.build();
	    }
	    
	    protected AuthenticationFilter getAuthenticationFilter(AuthenticationManager authenticationManager) throws Exception {
	        final AuthenticationFilter filter = new AuthenticationFilter(authenticationManager);
	        filter.setFilterProcessesUrl("/users/login");
	        return filter;
	    }
	 
//	    @Bean
//	    public WebSecurityCustomizer webSecurityCustomizer() {
//	        return (web) -> web.ignoring().antMatchers("/images/**", "/js/**", "/webjars/**");
//	    }
	 
		@Bean
		CorsConfigurationSource corsConfigurationSource() {
			final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
			source.registerCorsConfiguration("/**", new CorsConfiguration().applyPermitDefaultValues());
			return source;
		}

//	@Override
//	protected void configure(HttpSecurity http) throws Exception {
//		http.cors().and().csrf().disable();
//		http.authorizeRequests().antMatchers(PUBLIC_MATCHERS).permitAll().anyRequest().authenticated();
//		http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
//	}

//	@Override
//	protected void configure(HttpSecurity http) throws Exception {
//
//		if (Arrays.asList(env.getActiveProfiles()).contains("dev")||Arrays.asList(env.getActiveProfiles()).contains("test")) {
//			http.headers().frameOptions().disable();
//		}
//
//		http.cors().and().csrf().disable();
//		http.authorizeRequests().antMatchers(HttpMethod.POST, PUBLIC_MATCHERS_POST).permitAll()
//				.antMatchers(HttpMethod.GET, PUBLIC_MATCHERS_GET).permitAll().antMatchers(PUBLIC_MATCHERS).permitAll()
//				.anyRequest().authenticated();
////		http.addFilter(new JWTAuthenticationFilter(authenticationManager(), jwtUtil));
////		http.addFilter(new JWTAuthorizationFilter(authenticationManager(), jwtUtil, userDetailsService));
//		http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
//	}
//	

}
