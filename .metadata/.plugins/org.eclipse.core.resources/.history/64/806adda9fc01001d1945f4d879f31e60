package com.gabrielsousa.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig 
//extends WebSecurityConfigurerAdapter 
{

//	@Autowired
//	private Environment env;
//
//	private static final String[] PUBLIC_MATCHERS = { "/h2-console/**" };
//
//	private static final String[] PUBLIC_MATCHERS_GET = { "/products/**", "/categories/**", "/states/**","/clients/**" };
//
//	private static final String[] PUBLIC_MATCHERS_POST = { "/clients/**", "/auth/forgot/**" };
//
//	@Override
//	protected void configure(HttpSecurity http) throws Exception {
//
//		if (Arrays.asList(env.getActiveProfiles()).contains("dev")||Arrays.asList(env.getActiveProfiles()).contains("test")) {
//			http.headers().frameOptions().disable();
//		}
//
//		http.cors().and().csrf().disable();
//		http.authorizeRequests().antMatchers(HttpMethod.POST, PUBLIC_MATCHERS_POST).permitAll()
//				.antMatchers(HttpMethod.GET, PUBLIC_MATCHERS_GET).permitAll().antMatchers(PUBLIC_MATCHERS).permitAll()
//				.anyRequest().authenticated();
////		http.addFilter(new JWTAuthenticationFilter(authenticationManager(), jwtUtil));
////		http.addFilter(new JWTAuthorizationFilter(authenticationManager(), jwtUtil, userDetailsService));
//		http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
//	}
//	
//	@Bean
//	CorsConfigurationSource corsConfigurationSource() {
//		CorsConfiguration configuration = new CorsConfiguration().applyPermitDefaultValues();
//		configuration.setAllowedMethods(Arrays.asList("POST", "GET", "PUT", "DELETE", "OPTIONS"));
//		final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
//		source.registerCorsConfiguration("/**", configuration);
//		return source;
//	}
}
